# -*- coding: utf-8 -*-
"""Untitled59.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NQJHDRHYRm8Fv3M2j6v6dYYR2hA7A8XK
"""

# !pip install openmeteo-requests
# !pip install requests-cache retry-requests numpy pandas

import pandas as pd
import requests_cache
from retry_requests import retry
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
from pytz import timezone
from datetime import datetime

# Load CSV file
smog_file_path = '/content/location_smog.csv'
smog_df = pd.read_csv(smog_file_path)

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.currentcache', expire_after=3600)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)

# API key and endpoint
api_key = "dmjxSgVmXqx5O1Iq"
url = "https://customer-air-quality-api.open-meteo.com/v1/air-quality"

# Weightage percentages for pollutants
weights = {
    'pm10': 0.25,
    'pm2_5': 0.25,
    'carbon_monoxide': 0.10,
    'nitrogen_dioxide': 0.15,
    'sulphur_dioxide': 0.10,
    'ozone': 0.10,
    'dust': 0.05
}

def get_pakistan_time():
    """Get the current date and time in Pakistan's timezone."""
    pakistan_timezone = timezone('Asia/Karachi')
    now = datetime.now(pakistan_timezone)
    return f"{now.month}/{now.day}/{now.year} {now.hour}:00"

def get_current_air_quality(latitude, longitude):
    """Fetch current air quality data from the Open-Meteo API."""
    params = {
        "apikey": api_key,
        "latitude": latitude,
        "longitude": longitude,
        "hourly": "pm10,pm2_5,carbon_monoxide,nitrogen_dioxide,sulphur_dioxide,ozone,dust"
    }
    try:
        response = retry_session.get(url, params=params)
        response.raise_for_status()
        data = response.json().get("hourly", {})
        return {
            'pm10': data.get("pm10", [None])[0],
            'pm2_5': data.get("pm2_5", [None])[0],
            'carbon_monoxide': data.get("carbon_monoxide", [None])[0],
            'nitrogen_dioxide': data.get("nitrogen_dioxide", [None])[0],
            'sulphur_dioxide': data.get("sulphur_dioxide", [None])[0],
            'ozone': data.get("ozone", [None])[0],
            'dust': data.get("dust", [None])[0],
        }
    except Exception as e:
        print(f"Error fetching air quality for ({latitude}, {longitude}): {e}")
        return {}

def calculate_aqi(air_quality_data):
    """Calculate AQI using weighted averages."""
    return sum(air_quality_data.get(pollutant, 0) * weight for pollutant, weight in weights.items())

def process_row(row):
    """Process a single row to compute AQI."""
    air_quality = get_current_air_quality(row['latitude'], row['longitude'])
    return {
        'District': row['district'],
        'AQI': calculate_aqi(air_quality),
    }

def fetch_air_quality_parallel(smog_df):
    """Fetch air quality data in parallel."""
    results = []
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(process_row, row) for _, row in smog_df.iterrows()]
        for future in as_completed(futures):
            try:
                results.append(future.result())
            except Exception as e:
                print(f"Error occurred: {e}")
    return pd.DataFrame(results)

def current_main():
    """Main function to fetch, compute, and save AQI data."""
    air_quality_df = fetch_air_quality_parallel(smog_df)
    district_aqi = air_quality_df.groupby('District')['AQI'].max().reset_index()
    current_time = get_pakistan_time()
    current_date, current_hour = current_time.split(' ')

    combined_file_path = 'combined_hourly_data.csv'
    try:
        combined_df = pd.read_csv(combined_file_path)
    except FileNotFoundError:
        combined_df = pd.DataFrame(columns=['date', 'hour', 'District', 'AQI'])

    new_data = pd.DataFrame({
        'date': [current_date] * len(district_aqi),
        'hour': [current_hour] * len(district_aqi),
        'District': district_aqi['District'],
        'AQI': district_aqi['AQI']
    })

    combined_df = pd.concat([combined_df, new_data], ignore_index=True)
    combined_df.drop_duplicates(subset=['date', 'hour', 'District'], keep='last', inplace=True)
    combined_df.to_csv(combined_file_path, index=False)

    # Print the combined DataFrame
    print("Combined DataFrame after updating:")
    print(combined_df)

    return {
        'districts': district_aqi['District'].tolist(),
        'aqi': district_aqi['AQI'].tolist()
    }

if __name__ == '__main__':
    result = current_main()
    df = pd.DataFrame(result)
    print(df)